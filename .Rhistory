lines(x=c(time[(nt-history)], time[(nt + ne)]), y=c(c[2],c[2]), col="green3", lty="dashed", lwd=2)
} else {
lines(x=c(time[(nt-history)], time[(nt + ne)]), y=c(c,c), col="green3", lty="dashed", lwd=2)
}
if (plot.leg) {
legend(legend.pos, horiz=T, legend=legend_names,
col=legend_col,
lty=legend_lty,
pch=legend_pch, lwd=legend_lwd, cex=0.8)
}
}
par(mfrow=c(1, 1))
predictSTAR_andPlot(
model, time=dat$time, x_train=x_train, x_eval=x_eval,
pred_type="MC", single.step=T, plot.paths=F, plot.leg=T)
predictSTAR_andPlot(
model, time=dat$time, x_train=x_train, x_eval=x_eval,
pred_type="MC", single.step=F, plot.paths=T, plot.leg=T)
par(mfrow=c(1,2))
for (i in 1:nSTARs) {
predictSTAR_andPlot(
models_star[[ orders_s[i] ]], time=dat$time, x_train=x_train, x_eval=x_eval,
refit=T, single.step=T, plot.paths=F)
}
par(mfrow=c(1,2))
for (i in 1:nSTARs) {
predictSTAR_andPlot(
models_star[[ orders_s[i] ]], time=dat$time, x_train=x_train, x_eval=x_eval,
pred_type="MC", single.step=F, plot.paths=T)
}
par(mfrow=c(1,2))
for (i in 1:nSTARs) {
predictSTAR_andPlot(
models_star[[ orders_s[i] ]], time=dat$time, x_train=x_train, x_eval=x_eval,
pred_type="bootstrap", single.step=F, plot.paths=T)
}
Nb = 100;
se_factor <- 4; se_factor_multi <- 8;
model_s_cols_mse <- cbind(model_s_cols, sigmaSq=rep(0, nSTARs),
MSE_1step=rep(0, nSTARs), div=rep("", nSTARs),
MSE_MC=rep(0, nSTARs), div=rep("", nSTARs),
MSE_boot=rep(0, nSTARs), div=rep("", nSTARs), stringsAsFactors=F)
for (i in 1:nSTARs) {
model <- models_star[[ orders_s[i] ]];
# prediction errors have to be computed again since passing model to predictSETAR_andPlot does not
# pass reference, only a copy
predict1_naive <- PredictSTAR(model, x_train, x_eval, single.step=T, type="naive", return.paths=F)
predict_mc <- PredictSTAR(model, x_train, x_eval, single.step=F, type="MC", return.paths=F, Nboot=Nb)
predict_boot <- PredictSTAR(model, x_train, x_eval, single.step=F, type="bootstrap", return.paths=F, Nboot=Nb)
model$mse_naive <- predict1_naive$MSE; model$mse_mc <- predict_mc$MSE; model$mse_boot <- predict_boot$MSE
divergent1 <- se_factor * model$resSigmaSq < predict1_naive$MSE
divergent2 <- se_factor_multi * predict1_naive$MSE < predict_mc$MSE
divergent3 <- se_factor_multi * predict1_naive$MSE < predict_boot$MSE
model_s_cols_mse[i, 3] <- round(model$resSigmaSq, digits=4); # fill in rss
model_s_cols_mse[i, 4] <- round(predict1_naive$MSE, digits=4);
model_s_cols_mse[i, 5] <- ifelse(divergent1, "~","");
model_s_cols_mse[i, 6] <- round(predict_mc$MSE, digits=4);
model_s_cols_mse[i, 7] <- ifelse(divergent2, "~","");
model_s_cols_mse[i, 8] <- round(predict_boot$MSE, digits=4);
model_s_cols_mse[i, 9] <- ifelse(divergent3, "~","");
}
names(model_s_cols_mse) <- c("model", "BIC", "sigmaSq", "MSE(1-step)","","MSE(MC)","","MSE(boot)","")
model_s_cols_mse
cat("Models sorted by 1-step naive MSE:\n")
non_divergent <- model_s_cols_mse[which( sapply(1:nSTARs, function(i) nchar(gsub(" ", "", model_s_cols_mse[i, 5])) == 0) ), ]
mse_naive_orders <- order(non_divergent[, 4])
mse_naive_cols <- non_divergent[mse_naive_orders, ]
mse_naive_cols[, 1:4]
cat("Models sorted by Monte Carlo MSE:\n")
non_divergent <- model_s_cols_mse[which( sapply(1:nSTARs, function(i) nchar(gsub(" ", "", model_s_cols_mse[i, 7])) == 0) ), ]
mse_mc_orders <- order(non_divergent[, 6])
mse_mc_cols <- non_divergent[mse_mc_orders, ]
cbind(mse_mc_cols[, 1:3], MSE_mc=mse_mc_cols[, 6])
cat("Models sorted by Bootstrap MSE:\n")
non_divergent <- model_s_cols_mse[which( sapply(1:nSTARs, function(i) nchar(gsub(" ", "", model_s_cols_mse[i, 9])) == 0) ), ]
mse_boot_orders <- order(non_divergent[, 8])
mse_boot_cols <- non_divergent[mse_mc_orders, ]
cbind(mse_boot_cols[, 1:3], MSE_boot=mse_boot_cols[, 8])
suppressMessages(pkgTest("magrittr"))
suppressMessages(pkgTest("MSwM"))
xt <- x_train
# k is nReg
# dummyFit <-
# summary( msmFit(lm(y ~ 1, data.frame(y = xt)), k=2, p=1, sw=rep(T, 1 + 2)) )
bicMSW <- function(x, p, nreg) {
aic2 <- c();  bic2 <- c();
aic3 <- c();  bic3 <- c();
fitLin <- lm(y ~ 1, data.frame(y = xt))
# 2-reg models
k <- nreg[1]; tmp <- c()
cat("2-reg:")
cat("   p = ")
for(i in p) {
cat(i, " ")
fitmsm <- try( msmFit(fitLin, k = k, p = i, sw = rep(T, i + 2)), silent=T)
if (class(fitmsm) != "try-error") {
swi <- fitmsm@switch[-length(fitmsm@switch)]
np <- fitmsm["k"] * sum(swi) + sum(!swi)
# IC
aic2 <- c(aic2, 2 * fitmsm["Fit"]["logLikel"] + 2 * np)
bic2 <- c(bic2, 2 * fitmsm["Fit"]["logLikel"] + 2 * np * log(nrow(fitmsm@model$model)) )
}
}
# 3-reg models
k <- nreg[2]
cat("3-reg:")
cat("   p = ")
for(i in p) {
cat (i, " ")
fitmsm <- try( msmFit(fitLin, k = k, p = i, sw = c(rep(T, i + 1), F)), silent=T)
if (class(fitmsm) != "try-error") {
swi <- fitmsm@switch[-length(fitmsm@switch)]
np <- fitmsm["k"] * sum(swi) + sum(!swi)
# IC
aic3 <- c(aic3, 2 * fitmsm["Fit"]["logLikel"] + 2 * np )
bic3 <- c(bic3, 2 * fitmsm["Fit"]["logLikel"] + 2 * np * log(nrow(fitmsm@model$model)) )
}
}
results <- list()
results$p <- p
results$aic <- list("2" = aic2, "3" = aic3)
results$bic <- list("2" = bic2, "3" = bic3)
return(results)
}
pmax <- 12
suppressWarnings( results <- bicMSW(xt, p=1:pmax, nreg=2:3) )
par(mfrow=c(1,1))
plot(results$bic$`2`, type = "p", ylim = c(min(results$aic$`2`), max(results$bic$`2`)), main = "2-regime MSW\nInf crit", ylab = "IC", xlab = "p")
lines(results$aic$`2`, type = "p", col = "red")
legend("topleft", legend=c("BIC","AIC"), col=c("black","red"), pch=1, cex=0.8)
p <- which.min(results$bic$`2`)
suppressWarnings( fitmsm2 <- msmFit(lm(y ~ 1, data.frame(y = xt)), k=2, p=p, sw=rep(T, 1 + 2)) )
cat("transProbMatrix = \n")
round(fitmsm2@transMat, 4)
cat("ergodicProbs = \n")
M <-diag(fitmsm2@k) - fitmsm2@transMat
A <- rbind(M, rep(1, fitmsm2@k))
solve(t(A) %*% A) %*% t(A) %*% rbind(as.matrix(rep(0, fitmsm2@k)), 1)
cat("2-regime AR coeffs:\n")
fitmsm2@Coef
cat("sErrors:\n")
fitmsm2@seCoef
par(mfrow=c(1,1))
par(mar=c(3.5,3.5,3.5,3.5))
plotProb(fitmsm2, which = 1)
par(mfrow=c(1,2))
par(mar=c(3.5,3.5,3.5,3.5))
plotProb(fitmsm2, which = 2)
par(mar=c(3.5,3.5,3.5,3.5))
plotProb(fitmsm2, which = 3)
par(mfrow=c(1,1))
plot(results$bic$`3`, type = "p", ylim = c(min(results$aic$`3`), max(results$bic$`3`)), main = "3-regime MSW\nInf crit", ylab = "IC", xlab = "p")
lines(results$aic$`3`, type = "p", col = "red")
legend("topleft", legend=c("BIC","AIC"), col=c("black","red"), pch=1, cex=0.8)
p <- which.min(results$bic$`3`)
suppressWarnings( fitmsm3 <- msmFit(lm(y ~ 1, data.frame(y = xt)), k=3, p=2, sw=c(rep(T, 2 + 1), F)) )
cat("transProbMatrix = \n")
round(fitmsm3@transMat, 4)
cat("ergodicProbs = \n")
M <-diag(fitmsm3@k) - fitmsm3@transMat
A <- rbind(M, rep(1, fitmsm3@k))
solve(t(A) %*% A) %*% t(A) %*% rbind(as.matrix(rep(0, fitmsm3@k)), 1)
cat("3-regime AR coeffs:\n")
fitmsm3@Coef
cat("sErrors:\n")
fitmsm3@seCoef
par(mar=c(3.5,3.5,3.5,3.5))
plotProb(fitmsm3, which = 1)
par(mfrow=c(1,3))
par(mar=c(3.5,3.5,3.5,3.5))
plotProb(fitmsm3, which = 2)
par(mar=c(3.5,3.5,3.5,3.5))
plotProb(fitmsm3, which = 3)
par(mar=c(3.5,3.5,3.5,3.5))
plotProb(fitmsm3, which = 4)
par(mfrow=c(1,2))
plotDiag(fitmsm2, regime = 1, which = 1)
plotDiag(fitmsm2, regime = 2, which = 1)
par(mfrow=c(1,3))
plotDiag(fitmsm2, regime = 1, which = 2)
plotDiag(fitmsm2, regime = 2, which = 2)
par(mfrow=c(1,1))
par(mar=rep(4,4))
plotDiag(fitmsm2, regime = 1, which = 3)
par(mar=rep(4,4))
plotDiag(fitmsm2, regime = 2, which = 3)
par(mfrow=c(1,3))
plotDiag(fitmsm3, regime = 1, which = 1)
plotDiag(fitmsm3, regime = 2, which = 1)
plotDiag(fitmsm3, regime = 3, which = 1)
par(mfrow=c(1,3))
plotDiag(fitmsm3, regime = 1, which = 2)
plotDiag(fitmsm3, regime = 2, which = 2)
plotDiag(fitmsm3, regime = 3, which = 2)
par(mfrow=c(1,1))
par(mar=rep(4,4))
plotDiag(fitmsm3, regime = 1, which = 3)
par(mar=rep(4,4))
plotDiag(fitmsm3, regime = 2, which = 3)
par(mar=rep(4,4))
plotDiag(fitmsm3, regime = 3, which = 3)
# 1-step predict
matPredic2 <- fitmsm2@transMat %*% t(fitmsm2@Fit@filtProb)
MSWPredic2 <- vector(length = length(1:length(x_eval)))
for(t in 3:length(x_eval)){
valuePredic <- (t(fitmsm2@Coef)[1:2, 1] %*%
c(1, x_eval[(t - fitmsm2@p + 1):t])) * matPredic2[1] +
(t(fitmsm2@Coef)[1:2, 2] %*%
c(1, x_eval[(t - fitmsm2@p + 1):t])) * matPredic2[2]
MSWPredic2[t - 2] <- valuePredic
}
par(mfrow=c(1,2))
plot(x_eval, type = "b", main="MSW(2) 1-step prediction", xlab="t", ylab="x[%]")
lines(MSWPredic2, type = "l", col = "dodgerblue3", lwd=2)
matPredic3 <- fitmsm3@transMat %*% t(fitmsm3@Fit@filtProb)
MSWPredic3 <- vector(length = length(1:length(x_eval)))
for(t in 3:length(x_eval)){
valuePredic <- (t(fitmsm3@Coef)[1:3, 1] %*%
c(1, x_eval[(t - fitmsm3@p + 1):t])) * matPredic3[1] +
(t(fitmsm3@Coef)[1:3, 2] %*%
c(1, x_eval[(t - fitmsm3@p + 1):t])) * matPredic3[2] +
(t(fitmsm3@Coef)[1:3, 3] %*%
c(1, x_eval[(t - fitmsm3@p + 1):t])) * matPredic3[3]
MSWPredic3[t - 2] <- valuePredic
}
plot(x_eval, type = "b", main="MSW(3) 1-step prediction", xlab="t", ylab="x[%]")
lines(MSWPredic3, type = "l", col = "dodgerblue3", lwd=2)
fitmsm2@Coef
fitmsm2@seCoef
suppressMessages(pkgTest("forecast"))
set.seed(1000)
( model_ann_auto <- nnetar(xt) )
par(mfrow=c(1,1))
sapply(1:10, function(x) sum(nnetar(xt, p=2, size=x)$residuals^2, na.rm = T)) %>%
plot(xlab="q", ylab="RSS", type="b")
#rss_q <- sapply(1:10, function(x) sum(nnetar(xt, p=2, size=x)$residuals^2, na.rm = T))
#which.min(diff(rss_q))
( model_ann <- nnetar(xt, p=2, size=2) )
plot(xt, ylab="", main="In-sample fit", type="b", xlab="t")
lines(model_ann$fitted, col=rgb(0,0,0.9,0.7), lwd=2)
legend("bottomright", legend=c("data","ANN(2,2)"), lty=1, lwd=2, col=c(1,rgb(0,0,0.9,0.7)), pch=c(1,NA))
plot(dat$time[1:length(xt)], simulate(model_ann, nsim=length(xt)),type="l", lwd=2, col=rgb(0,0,0,0.7),
ylab="",xlab="time",main="Auto model simulation", ylim=c(-1,1))
lines(simulate(model_ann, nsim=length(xt)) ~ dat$time[1:length(xt)],col=rgb(0.9,0.2,0.1,0.7), lwd=2)
plot(dat$time[1:length(xt)], lwd=2, col=rgb(0,0,0,0.7),
simulate(model_ann,nsim=length(xt),innov=replicate(length(xt),0)), main="determ. sim",type="l",ylab="",xlab="time")
fcast_ann <- forecast(model_ann, PI=TRUE, h=length(x_eval), npaths=100)
plot(fcast_ann, main="Multistep ANN(2,2) forecast", lwd=2, col=rgb(0,0,0,0.7))
lines(c(rep(NA, length(xt)-1), xt[length(xt)], x_eval), lwd=2, col=rgb(0,0,0,0.7))
fit_ann <- nnetar(c(xt, x_eval), model=model_ann)
one_step_ann <- tail(fitted(fit_ann),length(x_eval))
qLANN <- (one_step_ann + quantile(na.omit(model_ann$residuals), 0.1))
qHANN <- (one_step_ann + quantile(na.omit(model_ann$residuals), 0.9))
eval_time <- dat$time[length(xt):(length(xt) + length(x_eval))]
plot(dat$time[1:(length(xt) + length(x_eval))], c(xt, x_eval), ylim=c(-1,1), type="l",ylab="time", xlab="",main="One-step ANN(2,2) forecast", lwd=2, col=rgb(0,0,0,0.7))
lines(eval_time, c(xt[length(xt)], one_step_ann), lwd=2, col=rgb(0,0,0.99,0.7))
polygon(x = c(eval_time, rev(eval_time)), y = c(c(xt[length(xt)], qLANN), rev(c(xt[length(xt)], qHANN))), col=adjustcolor("blue", alpha.f = 0.2),border = F)
suppressMessages(pkgTest("neuralnet"))
test_ann <- {}
test_ann$width <- tail(xt, length(xt)-2)
test_ann$lag1 <- xt[2:(length(xt)-1)]
test_ann$lag2 <- xt[1:(length(xt)-2)]
NNtest <- neuralnet(width ~ lag1 + lag2, test_ann, hidden=2,linear.output = T)
plot(NNtest, rep="best")
gamma10 = 2.15099; gamma11 = -6.55571; gamma12 = 1.64279;
gamma20 = -1.09858; gamma21 = 9.94937; gamma22 = -0.58115;
X1 = -1; X2 = 1; # x-pts
Y11 = -gamma10 / gamma12 - gamma11 / gamma12 / X1; Y12 = -gamma10 / gamma12 - gamma11 / gamma12 / X2; # line1 y-pts
Y21 = -gamma20 / gamma22 - gamma21 / gamma22 / X1; Y22 = -gamma20 / gamma22 - gamma21 / gamma22 / X2; # line2 y-pts
suppressMessages(pkgTest("plot3D"))
M <- mesh(x=seq(-1, 1, length.out=100), y=seq(-1, 1, length.out=100))
G <- function(x){
out<-(1/(1+exp(-x)))
}
findZAuto<-function(x,y){
#1st hidden node
temp1<- 1 * NNtest$weights[[1]][[1]][1,1] + x * NNtest$weights[[1]][[1]][2,1] + y * NNtest$weights[[1]][[1]][3,1]
#2nd hidden node
temp2<- 1 * NNtest$weights[[1]][[1]][1,2] + x * NNtest$weights[[1]][[1]][2,2] + y * NNtest$weights[[1]][[1]][3,2]
#output
out<- 1 * NNtest$weights[[1]][[2]][[1]] + G(temp1) * NNtest$weights[[1]][[2]][[2]] + G(temp2) * NNtest$weights[[1]][[2]][[3]]
}
z <- with(M, findZAuto(x,y))
contour(seq(-1, 1, length.out=100), seq(-1, 1, length.out=100), z, nlevels = 25)
lines(x=c(X1,X2), y=c(Y11, Y12), col="brown3", lty="dashed", lwd=2)
lines(x=c(X1,X2), y=c(Y21, Y22), col="dodgerblue", lty="dashed", lwd=2)
legend("topleft", legend=c("gamma1 Yt", "gamma2 Yt"), col=c("brown3", "dodgerblue"),
lty="dashed", lwd=2, cex=0.8)
SETAR2 <- model_cols_mse[1, 1:4]
SETAR3 <- model_cols_mse[6, 1:4]
STAR2 <- model_s_cols_mse[1, 1:4]
STAR3 <- model_s_cols_mse[2, 1:4]
MSW2 <- data.frame(cbind("MSW(2,1)", "NA", round(mean(fitmsm2@model$residuals^2),4), round(mean((x_eval - MSWPredic2)^2),4)))
MSW3 <- data.frame(cbind("MSW(3,3)", "NA", round(mean(fitmsm3@model$residuals^2),4), round(mean((x_eval - MSWPredic3)^2),4)))
ANN2 <- data.frame(cbind("ANN(2,2)", "NA", round(mean(na.omit(model_ann$residuals)^2),4), round(mean((x_eval - one_step_ann)^2),4)))
cnames <- c("model", "BIC", "sigmaSq", "MSE(1-step)")
names(MSW2) <- cnames; names(MSW3) <- cnames; names(ANN2) <- cnames
# TABLE <- rbind(SETAR2, SETAR3, MSW2, MSW3, ANN2, stringsAsFactors=F)
TABLE <- rbind(SETAR2, SETAR3, STAR2, STAR3, MSW2, MSW3, ANN2, stringsAsFactors=F)
sigmaSqOrders <- order(TABLE[,3])
cat("Models ordered by sigmaSq:\n")
TABLE[sigmaSqOrders,]
mseOrders <- order(TABLE[,4])
cat("Models ordered by prediction MSE:\n")
TABLE[mseOrders,]
phi <- fitmsm2@Coef
se <- fitmsm2@seCoef
phi[1,]
phi <- round(fitmsm2@Coef,4)
se <- round(fitmsm2@seCoef,4)
phi[1,]
regStr1 <- getRegimeString(phi[1,], se[1,], p=1)
regStr2 <- getRegimeString(phi[2,], se[2,], p=1)
regStr1
regStr2
phi <- round(fitmsm3@Coef,4)
se <- round(fitmsm3@seCoef,4)
phi
summary(fitmsm2)
msmResid(fitmsm2, regime=1)
mean(msmResid(fitmsm2, regime=1)^2)
plot(NNtest, rep="best")
beta0 = 0.15821; beta1 = -1.00004; beta2 = 1.26277
model_ann
ann_sig2 = mean(model_ann$residuals^2)
SETAR3
STAR2
STAR3
models_s3[[ orders_s3[1] ]]$name
STAR3
models_s[[ orders_s[1] ]]$name
STAR2
models[[ orders[3] ]]$name
SETAR3
models[[ orders[2] ]]$name
models[[ orders[1] ]]$name
models[[ orders[4] ]]$name
models[[ orders[5] ]]$name
models[[ orders[6] ]]$name
mod <- models[[ orders[1] ]]
mod$name
gamma01
gamma10
plot(NNtest, rep="best")
plot(NNtest, rep="best")
NNtest
NNtest$weights[[1]]
nnWghts <- NNtest$weights[[1]]
nnWghts[[1]][1, 1]
plot(NNtest, rep="best")
plot(NNtest, rep="best")
nnWghts <- NNtest$weights[[1]]
gamma10 = nnWghts[[1]][1, 1]; gamma11 = nnWghts[[1]][2, 1]; gamma12 = nnWghts[[1]][3, 1];
gamma20 = nnWghts[[1]][1, 2]; gamma21 = nnWghts[[1]][2, 2]; gamma22 = nnWghts[[1]][3, 2];
X1 = -1; X2 = 1; # x-pts
Y11 = -gamma10 / gamma12 - gamma11 / gamma12 / X1; Y12 = -gamma10 / gamma12 - gamma11 / gamma12 / X2; # line1 y-pts
Y21 = -gamma20 / gamma22 - gamma21 / gamma22 / X1; Y22 = -gamma20 / gamma22 - gamma21 / gamma22 / X2; # line2 y-pts
beta0 = nnWghts[[2]][1]; beta1 = nnWghts[[2]][2]; beta2 = nnWghts[[2]][3]
z <- with(M, findZAuto(x,y))
contour(seq(-1, 1, length.out=100), seq(-1, 1, length.out=100), z, nlevels = 25)
lines(x=c(X1,X2), y=c(Y11, Y12), col="brown3", lty="dashed", lwd=2)
lines(x=c(X1,X2), y=c(Y21, Y22), col="dodgerblue", lty="dashed", lwd=2)
legend("topleft", legend=c("gamma1 Yt", "gamma2 Yt"), col=c("brown3", "dodgerblue"),
lty="dashed", lwd=2, cex=0.8)
suppressMessages(pkgTest("plot3D"))
M <- mesh(x=seq(-1, 1, length.out=100), y=seq(-2, 1, length.out=100))
G <- function(x){
out<-(1/(1+exp(-x)))
}
findZAuto<-function(x,y){
#1st hidden node
temp1<- 1 * NNtest$weights[[1]][[1]][1,1] + x * NNtest$weights[[1]][[1]][2,1] + y * NNtest$weights[[1]][[1]][3,1]
#2nd hidden node
temp2<- 1 * NNtest$weights[[1]][[1]][1,2] + x * NNtest$weights[[1]][[1]][2,2] + y * NNtest$weights[[1]][[1]][3,2]
#output
out<- 1 * NNtest$weights[[1]][[2]][[1]] + G(temp1) * NNtest$weights[[1]][[2]][[2]] + G(temp2) * NNtest$weights[[1]][[2]][[3]]
}
z <- with(M, findZAuto(x,y))
contour(seq(-1, 1, length.out=100), seq(-1, 1, length.out=100), z, nlevels = 25)
lines(x=c(X1,X2), y=c(Y11, Y12), col="brown3", lty="dashed", lwd=2)
lines(x=c(X1,X2), y=c(Y21, Y22), col="dodgerblue", lty="dashed", lwd=2)
legend("topleft", legend=c("gamma1 Yt", "gamma2 Yt"), col=c("brown3", "dodgerblue"),
lty="dashed", lwd=2, cex=0.8)
suppressMessages(pkgTest("plot3D"))
M <- mesh(x=seq(-1, 1, length.out=100), y=seq(-2, 1, length.out=100))
G <- function(x){
out<-(1/(1+exp(-x)))
}
findZAuto<-function(x,y){
#1st hidden node
temp1<- 1 * NNtest$weights[[1]][[1]][1,1] + x * NNtest$weights[[1]][[1]][2,1] + y * NNtest$weights[[1]][[1]][3,1]
#2nd hidden node
temp2<- 1 * NNtest$weights[[1]][[1]][1,2] + x * NNtest$weights[[1]][[1]][2,2] + y * NNtest$weights[[1]][[1]][3,2]
#output
out<- 1 * NNtest$weights[[1]][[2]][[1]] + G(temp1) * NNtest$weights[[1]][[2]][[2]] + G(temp2) * NNtest$weights[[1]][[2]][[3]]
}
z <- with(M, findZAuto(x,y))
contour(seq(-1, 1, length.out=100), seq(-2, 1, length.out=100), z, nlevels = 25)
lines(x=c(X1,X2), y=c(Y11, Y12), col="brown3", lty="dashed", lwd=2)
lines(x=c(X1,X2), y=c(Y21, Y22), col="dodgerblue", lty="dashed", lwd=2)
legend("topleft", legend=c("gamma1 Yt", "gamma2 Yt"), col=c("brown3", "dodgerblue"),
lty="dashed", lwd=2, cex=0.8)
nnWghts[[2]][1]
NNtest$weights[[1]][[2]][[1]]
NNtest$weights[[1]][[2]][[2]]
nnWghts[[2]][2]
nnWghts[[2]][3]
NNtest$weights[[1]][[2]][[3]]
suppressMessages(pkgTest("neuralnet"))
test_ann <- {}
test_ann$width <- tail(xt, length(xt)-2)
test_ann$lag1 <- xt[2:(length(xt)-1)]
test_ann$lag2 <- xt[1:(length(xt)-2)]
NNtest <- neuralnet(width ~ lag1 + lag2, test_ann, hidden=2,linear.output = T)
plot(NNtest, rep="best")
nnWghts <- NNtest$weights[[1]]
gamma10 = nnWghts[[1]][1, 1]; gamma11 = nnWghts[[1]][2, 1]; gamma12 = nnWghts[[1]][3, 1];
gamma20 = nnWghts[[1]][1, 2]; gamma21 = nnWghts[[1]][2, 2]; gamma22 = nnWghts[[1]][3, 2];
X1 = -1; X2 = 1; # x-pts
Y11 = -gamma10 / gamma12 - gamma11 / gamma12 * X1; Y12 = -gamma10 / gamma12 - gamma11 / gamma12 * X2; # line1 y-pts
Y21 = -gamma20 / gamma22 - gamma21 / gamma22 * X1; Y22 = -gamma20 / gamma22 - gamma21 / gamma22 * X2; # line2 y-pts
beta0 = nnWghts[[2]][1]; beta1 = nnWghts[[2]][2]; beta2 = nnWghts[[2]][3]
suppressMessages(pkgTest("neuralnet"))
test_ann <- {}
test_ann$width <- tail(xt, length(xt)-2)
test_ann$lag1 <- xt[2:(length(xt)-1)]
test_ann$lag2 <- xt[1:(length(xt)-2)]
NNtest <- neuralnet(width ~ lag1 + lag2, test_ann, hidden=2,linear.output = T)
plot(NNtest, rep="best")
nnWghts <- NNtest$weights[[1]]
gamma10 = nnWghts[[1]][1, 1]; gamma11 = nnWghts[[1]][2, 1]; gamma12 = nnWghts[[1]][3, 1];
gamma20 = nnWghts[[1]][1, 2]; gamma21 = nnWghts[[1]][2, 2]; gamma22 = nnWghts[[1]][3, 2];
X1 = -1; X2 = 1; # x-pts
Y11 = -gamma10 / gamma12 - gamma11 / gamma12 * X1; Y12 = -gamma10 / gamma12 - gamma11 / gamma12 * X2; # line1 y-pts
Y21 = -gamma20 / gamma22 - gamma21 / gamma22 * X1; Y22 = -gamma20 / gamma22 - gamma21 / gamma22 * X2; # line2 y-pts
beta0 = nnWghts[[2]][1]; beta1 = nnWghts[[2]][2]; beta2 = nnWghts[[2]][3]
suppressMessages(pkgTest("plot3D"))
M <- mesh(x=seq(-1, 1, length.out=100), y=seq(-2, 1, length.out=100))
G <- function(x){
out<-(1/(1+exp(-x)))
}
findZAuto<-function(x,y){
#1st hidden node
temp1<- 1 * NNtest$weights[[1]][[1]][1,1] + x * NNtest$weights[[1]][[1]][2,1] + y * NNtest$weights[[1]][[1]][3,1]
#2nd hidden node
temp2<- 1 * NNtest$weights[[1]][[1]][1,2] + x * NNtest$weights[[1]][[1]][2,2] + y * NNtest$weights[[1]][[1]][3,2]
#output
out<- 1 * NNtest$weights[[1]][[2]][[1]] + G(temp1) * NNtest$weights[[1]][[2]][[2]] + G(temp2) * NNtest$weights[[1]][[2]][[3]]
}
z <- with(M, findZAuto(x,y))
contour(seq(-1, 1, length.out=100), seq(-2, 1, length.out=100), z, nlevels = 25)
lines(x=c(X1,X2), y=c(Y11, Y12), col="brown3", lty="dashed", lwd=2)
lines(x=c(X1,X2), y=c(Y21, Y22), col="dodgerblue", lty="dashed", lwd=2)
legend("topleft", legend=c("gamma1 Yt", "gamma2 Yt"), col=c("brown3", "dodgerblue"),
lty="dashed", lwd=2, cex=0.8)
suppressMessages(pkgTest("plot3D"))
M <- mesh(x=seq(-1, 2, length.out=100), y=seq(-2, 1, length.out=100))
G <- function(x){
out<-(1/(1+exp(-x)))
}
findZAuto<-function(x,y){
#1st hidden node
temp1<- 1 * NNtest$weights[[1]][[1]][1,1] + x * NNtest$weights[[1]][[1]][2,1] + y * NNtest$weights[[1]][[1]][3,1]
#2nd hidden node
temp2<- 1 * NNtest$weights[[1]][[1]][1,2] + x * NNtest$weights[[1]][[1]][2,2] + y * NNtest$weights[[1]][[1]][3,2]
#output
out<- 1 * NNtest$weights[[1]][[2]][[1]] + G(temp1) * NNtest$weights[[1]][[2]][[2]] + G(temp2) * NNtest$weights[[1]][[2]][[3]]
}
z <- with(M, findZAuto(x,y))
contour(seq(-1, 2, length.out=100), seq(-2, 1, length.out=100), z, nlevels = 25)
lines(x=c(X1,X2), y=c(Y11, Y12), col="brown3", lty="dashed", lwd=2)
lines(x=c(X1,X2), y=c(Y21, Y22), col="dodgerblue", lty="dashed", lwd=2)
legend("topleft", legend=c("gamma1 Yt", "gamma2 Yt"), col=c("brown3", "dodgerblue"),
lty="dashed", lwd=2, cex=0.8)
suppressMessages(pkgTest("plot3D"))
M <- mesh(x=seq(-1, 1, length.out=100), y=seq(-1, 1, length.out=100))
G <- function(x){
out<-(1/(1+exp(-x)))
}
findZAuto<-function(x,y){
#1st hidden node
temp1<- 1 * NNtest$weights[[1]][[1]][1,1] + x * NNtest$weights[[1]][[1]][2,1] + y * NNtest$weights[[1]][[1]][3,1]
#2nd hidden node
temp2<- 1 * NNtest$weights[[1]][[1]][1,2] + x * NNtest$weights[[1]][[1]][2,2] + y * NNtest$weights[[1]][[1]][3,2]
#output
out<- 1 * NNtest$weights[[1]][[2]][[1]] + G(temp1) * NNtest$weights[[1]][[2]][[2]] + G(temp2) * NNtest$weights[[1]][[2]][[3]]
}
z <- with(M, findZAuto(x,y))
contour(seq(-1, 1, length.out=100), seq(-1, 1, length.out=100), z, nlevels = 25)
lines(x=c(X1,X2), y=c(Y11, Y12), col="brown3", lty="dashed", lwd=2)
lines(x=c(X1,X2), y=c(Y21, Y22), col="dodgerblue", lty="dashed", lwd=2)
legend("topleft", legend=c("gamma1 Yt", "gamma2 Yt"), col=c("brown3", "dodgerblue"),
lty="dashed", lwd=2, cex=0.8)
gamma10
gamma20
gamma12
NNtest$weights[[1]][[1]][2,2]
NNtest$weights[[1]][[1]][3,1]
gamma21
NNtest$weights[[1]][[1]][3,2]
gamma22
str(models[[ orders[3] ]])
models[[ orders[3] ]]$PhiParams
models[[ orders[3] ]]$PhiStErrors
models[[ orders[3] ]]$resSigmaSq
models[[ orders[3] ]]$regSigmaSq
H <return>
H
models_s[[ orders_s[1] ]]$gamma
round(NNtest$weights[[1]], 3)
plot(NNtest, rep="best")
round(NNtest$weights[[1]], 3)
