time_range <- (nt - history):(nt + ne)
pred_range <- 1:(ne + 1)
c <- model$c
method_name <-  paste0(ifelse(single.step, "",
switch(pred_type, "naive" = "Naive", "MC" = "Monte Carlo", "bootstrap" = "Bootstrap")),
" (", n_ahead, "-step) ", ifelse(plot.paths, "sim", ""), ifelse(print.rmse, paste("\n RMSE =", round(sqrt(predict$MSE), digits=4)), ""))
method_name_short <- paste0(ifelse(single.step,"", pred_type), " (", n_ahead, "-step) ")
if (plot.leg) {
if (length(c) > 1) {
legend_names <- c("data", method_name_short,
ifelse(pred_type != "naive" && !single.step, paste0((1 - predict$alpha) * 100,"% conf.interval   "), NA), "c1", "c2", ifelse(plot.paths, "paths", NA))
legend_col <- c("black", "dodgerblue3", ifelse(pred_type != "naive" && !single.step, "dodgerblue2", NA), "brown3", "green3", ifelse(plot.paths, gray(0.6, alpha=0.2), NA))
legend_lty <- c(NA, 1, ifelse(pred_type != "naive" && !single.step, 2, NA), 2, 2, ifelse(plot.paths, 1, NA))
legend_pch <- c(1, NA, NA, NA, NA, NA)
legend_lwd <- c(2, 2, ifelse(pred_type != "naive" && !single.step, 2, NA), 2, 2, ifelse(plot.paths, 1, NA))
} else {
legend_names <- c("data", method_name_short,
ifelse(pred_type != "naive" && !single.step, paste0((1 - predict$alpha) * 100,"% conf.interval   "), NA), "c", ifelse(plot.paths, "paths", NA))
legend_col <- c("black", "dodgerblue3", ifelse(pred_type != "naive" && !single.step, "dodgerblue2", NA), "green3", ifelse(plot.paths, gray(0.6, alpha=0.2), NA))
legend_lty <- c(NA, 1, ifelse(pred_type != "naive" && !single.step, 2, NA), 2, ifelse(plot.paths, 1, NA))
legend_pch <- c(1, NA, NA, NA, NA)
legend_lwd <- c(2, 2, ifelse(pred_type != "naive" && !single.step, 2, NA), 2, ifelse(plot.paths, 1, NA))
}
}
plot(x=dat$time[time_range],y=xt[time_range], type="b", lwd=2,
ylim=plt_range, main=paste(model$name, method_name), xlab="t", ylab="x[%]")
# simulations
if (plot.paths) matlines(x=matrix(time[(nt - 1) + pred_range], byrow=T), y=x_paths, col=gray(0.6, alpha=0.2), lty=1)
# conf. interval fill
if (pred_type != "naive" && !single.step) {
polygon(
x=c(time[(nt - 1) + pred_range], rev(time[(nt - 1) + pred_range])), y=c(err_low[pred_range],rev(err_high[pred_range])),
col=adjustcolor("dodgerblue2", alpha.f=0.3), border=F)
}
# x
lines(x=time[(nt - 1) + pred_range], y=x[pred_range], col="dodgerblue3", lwd=2)
# conf. intervals
if (pred_type != "naive" && !single.step) {
lines(x=time[(nt - 1) + pred_range], y=err_low[pred_range], col="dodgerblue2", lwd=2, lty="dashed")
lines(x=time[(nt - 1) + pred_range], y=err_high[pred_range], col="dodgerblue2", lwd=2, lty="dashed")
}
# thresholds
if (length(c) > 1) {
lines(x=c(time[(nt-history)], time[(nt + ne)]), y=c(c[1],c[1]), col="brown3", lty="dashed", lwd=2)
lines(x=c(time[(nt-history)], time[(nt + ne)]), y=c(c[2],c[2]), col="green3", lty="dashed", lwd=2)
} else {
lines(x=c(time[(nt-history)], time[(nt + ne)]), y=c(c,c), col="green3", lty="dashed", lwd=2)
}
if (plot.leg) {
legend(legend.pos, horiz=T, legend=legend_names,
col=legend_col,
lty=legend_lty,
pch=legend_pch, lwd=legend_lwd, cex=0.8)
}
}
par(mfrow=c(1, 1))
predictSETAR_andPlot(
models[[ orders[6] ]], time=dat$time, x_train=x_train, x_eval=x_eval,
pred_type="MC", single.step=T, plot.paths=F, plot.leg=T)
predictSETAR_andPlot(
models[[ orders[6] ]], time=dat$time, x_train=x_train, x_eval=x_eval,
pred_type="MC", single.step=F, plot.paths=T, plot.leg=T, plt_range=c(-2,6))
par(mfrow=c(1, 2))
for (i in 1:12) {
predictSETAR_andPlot(
models[[ orders[i] ]], time=dat$time, x_train=x_train, x_eval=x_eval,
refit=T, single.step=T, plot.paths=F)
}
par(mfrow=c(1, 2))
for (i in 1:12) {
predictSETAR_andPlot(
models[[ orders[i] ]], time=dat$time, x_train=x_train, x_eval=x_eval,
pred_type="MC", single.step=F, plot.paths=T, Nboot=200)
}
par(mfrow=c(1, 2))
for (i in 1:12) {
predictSETAR_andPlot(
models[[ orders[i] ]], time=dat$time, x_train=x_train, x_eval=x_eval,
pred_type="bootstrap", single.step=F, plot.paths=T)
}
Nb = 100
se_factor <- 4; se_factor_multi <- 8;
model_cols_mse <- cbind(model_cols, sigmaSq=rep(0, 12),
MSE_1step=rep(0, 12), div=rep("", 12),
MSE_MC=rep(0, 12), div=rep("", 12),
MSE_boot=rep(0, 12), div=rep("",12), stringsAsFactors=F)
for (i in 1:12) {
# i <- 4
model <- models[[ orders[i] ]];
# prediction errors have to be computed again since passing model to predictSETAR_andPlot does not
# pass reference, only a copy
predict1_naive <- PredictSETAR(model, x_train, x_eval, single.step=T, type="naive", return.paths=F)
predict_mc <- PredictSETAR(model, x_train, x_eval, single.step=F, type="MC", return.paths=F, Nboot=Nb)
predict_boot <- PredictSETAR(model, x_train, x_eval, single.step=F, type="bootstrap", return.paths=F, Nboot=Nb)
model$mse_naive <- predict1_naive$MSE; model$mse_mc <- predict_mc$MSE; model$mse_boot <- predict_boot$MSE
divergent1 <- se_factor * model$resSigmaSq < predict1_naive$MSE
divergent2 <- se_factor_multi * predict1_naive$MSE < predict_mc$MSE
divergent3 <- se_factor_multi * predict1_naive$MSE < predict_boot$MSE
model_cols_mse[i, 3] <- round(model$resSigmaSq, digits=4); # fill in rss
model_cols_mse[i, 4] <- round(predict1_naive$MSE, digits=4);
model_cols_mse[i, 5] <- ifelse(divergent1, "~","");
model_cols_mse[i, 6] <- round(predict_mc$MSE, digits=4);
model_cols_mse[i, 7] <- ifelse(divergent2, "~","");
model_cols_mse[i, 8] <- round(predict_boot$MSE, digits=4);
model_cols_mse[i, 9] <- ifelse(divergent3, "~","");
}
names(model_cols_mse) <- c("model", "BIC", "sigmaSq", "MSE(1-step)","","MSE(MC)","","MSE(boot)","")
model_cols_mse
cat("Models sorted by 1-step naive MSE:\n")
non_divergent <- model_cols_mse[which( sapply(1:12, function(i) nchar(gsub(" ", "", model_cols_mse[i, 5])) == 0) ), ]
mse_naive_orders <- order(non_divergent[, 4])
mse_naive_cols <- non_divergent[mse_naive_orders, ]
mse_naive_cols[, 1:4]
cat("Models sorted by Monte Carlo MSE:\n")
non_divergent <- model_cols_mse[which( sapply(1:12, function(i) nchar(gsub(" ", "", model_cols_mse[i, 7])) == 0) ), ]
mse_mc_orders <- order(non_divergent[, 6])
mse_mc_cols <- non_divergent[mse_mc_orders, ]
cbind(mse_mc_cols[, 1:3], MSE_mc=mse_mc_cols[, 6])
cat("Models sorted by Bootstrap MSE:\n")
non_divergent <- model_cols_mse[which( sapply(1:12, function(i) nchar(gsub(" ", "", model_cols_mse[i, 9])) == 0) ), ]
mse_boot_orders <- order(non_divergent[, 8])
mse_boot_cols <- non_divergent[mse_mc_orders, ]
cbind(mse_boot_cols[, 1:3], MSE_boot=mse_boot_cols[, 8])
LMtest_LINvsSTAR <- function(x, p, d, alpha=0.05, alternative=c("LSTAR","ESTAR")) {
x <- as.ts(x)  # if x is not a ts object
tmp <- c(  # list of delayed ts
list(x),
lapply(1:p, function(i) lag(x, -i))
)
tmp <- do.call(function(...) ts.intersect(..., dframe=T), tmp)
names(tmp) <- c("x", paste0("x",1:p))
y <- lm(x ~ ., data=tmp)$residuals
y <- c(rep(NA, p), y)
attributes(y) <- attributes(x)  # make y the same ts object as x
tmp <- c(
list(y),
lapply(1:p, function(i) stats::lag(x, -i)),  # lag shifts forward, therefore the minus operator
lapply(1:p, function(i) stats::lag(x, -i)*stats::lag(x,-d)),
lapply(1:p, function(i) stats::lag(x, -i)*stats::lag(x,-d)^2)
)
switch(alternative[1],
LSTAR = {
tmp <- c(tmp, lapply(1:p, function(i) stats::lag(x, -i)*stats::lag(x,-d)^3) )
df <- 3*p
},
ESTAR = { df <- 2*p }
)
tmp <- do.call(function(...) ts.intersect(..., dframe=T), tmp)
names(tmp)[1] <- "y"  # enough to label the first column (response)
z <- lm(y ~ ., data=tmp)$residuals
LM <- length(x) * (1 - sum(z^2)/sum(y^2, na.rm=T))
c(LM=LM, crit_val=qchisq(1-alpha, df=df), p_value=1-pchisq(LM, df=df))
}
# LMtest_LINvsSTAR(xt, p=3, d=1, alternative = "LSTAR")
# LMtest_LINvsSTAR(xt, p=3, d=1, alternative = "ESTAR")
LMtest_EvsL <- function(x, p, d, alpha=0.05) {
x <- as.ts(x)  # if x is not a ts object
tmp <- c(  # list of delayed ts
list(x),
lapply(1:p, function(i) stats::lag(x, -i))
)
tmp <- do.call(function(...) ts.intersect(..., dframe = T), tmp)
names(tmp) <- c("x", paste0("x", 1:p))
y <- lm(x ~ ., data = tmp)$residuals
y <- c(rep(NA, p), y)
attributes(y) <- attributes(x)  # make y the same ts object as x
tmp <- c(
list(y),
lapply(1:p, function(i) stats::lag(x, -i)),  # lag shifts forward, therefore the minus operator
lapply(1:p, function(i) stats::lag(x, -i) * stats::lag(x, -d)),
lapply(1:p, function(i) stats::lag(x, -i) * stats::lag(x, -d)^2)
)
# === ESTAR regression ========
tmp <- do.call(function(...) ts.intersect(..., dframe = T), tmp)
names(tmp)[1] <- "y"
res_E <- lm(y ~ ., data = tmp)$residuals
# === LSTAR regression ========
tmp <- c(tmp, lapply(1:p, function(i) stats::lag(x, -i) * stats::lag(x, -d)^3) )
tmp <- do.call(function(...) ts.intersect(..., dframe = T), tmp)
names(tmp)[1] <- "y"
res_L <- lm(y ~ ., data = tmp)$residuals
LM <- length(x) * (1 - sum(res_L^2) / sum(res_E^2))
c(LM = LM, crit_val = qchisq(1 - alpha, df = p), p_value = 1 - pchisq(LM, df = p), alpha_corrected = alpha / p)
}
# LMtest_EvsL(xt, p=3, d=1)
# par(mfrow=c(1, 2))
acf(xt, lag.max=20, type="partial")
pmax <- 12
starTest <- list()
results <- sapply(1:pmax, function(p)
sapply(1:p, function(d)
c(p = p, d = d, LMtest_LINvsSTAR(xt, p, d, alt = "LSTAR")["p_value"], crit = alpha / (3 * p))
)
)
results <- data.frame(t(do.call(cbind, results)))
cat("LSTAR non-linearity test results (linearity rejected):\n")
( starTest$LSTARs <- results[results$p_value < results$crit, ] )
results <- sapply(1:pmax, function(p)
sapply(1:p, function(d)
c(p = p, d = d, LMtest_LINvsSTAR(xt, p, d, alt = "ESTAR")["p_value"], crit = alpha / (3 * p))
)
)
results <- data.frame(t(do.call(cbind, results)))
cat("ESTAR non-linearity test results (linearity rejected):\n")
( starTest$ESTARs <- results[results$p_value < results$crit, ] )
( starTest <- list(LSTARs=starTest$LSTARs[, 1:2], ESTARs=starTest$ESTARs[, 1:2]) )
( inters <- dplyr::intersect(starTest$LSTARs, starTest$ESTARs) %>%
apply(MARGIN=1, FUN=function(x) c(x, round(LMtest_EvsL(xt, p=x[1], d=x[2]), digits=4)) ) %>% t() )
cat("\n ESTAR preference: \n")
epref <- inters[which(inters[, 5] < inters[, 6]), ]
ifelse(length(epref), epref, NA)
SmoothTransition <- function(x, c, gamma, type=c("logistic","exponential")) {
switch(type,
logistic = {1 / (1 + exp(-gamma * (x - c)))},
exponential = {1 - exp(-gamma * (x - c)^2)}
)
}
# SmoothTransition(0.3, c=0.2, gamma=10, type="logistic")
# SmoothTransition(0.3, c=c(-0.1, 0.2), gamma=c(1, 5), type="logistic")
Yt <- function(x, t, p) c(1, x[(t-1):(t-p)])
# Yt(xt, t=3, p=2)
Xt_m <- function(x, t, p, d, c, gamma, m=2, z = x, type=c("logistic", "exponential")) {
type <- match.arg(type)
I <- SmoothTransition(z[t - d], c, gamma, type)
Y <- Yt(x, t, p)
as.numeric(sapply(1:m, function(j) (ifelse(j == 1, 1, I[j - 1]) - ifelse(j == m, 0, I[j])) * Y))
}
# Xt_m(xt, t=3, p=2, d=1, c=0.2, gamma=10)
# Xt_m(xt, t=3, p=2, d=1, c=c(-0.1, 0.2), gamma=c(1, 5), m=3)
skelSTAR_m <- function(x, t, p, d, c, gamma, PhiParams, m=2, z = x, type = c("logistic", "exponential")) {
type <- match.arg(type)
c(PhiParams %*% Xt_m(x, t, p, d, c, gamma, m, z, type))
}
# skelSTAR_m(xt, t=10, p=2, d=1, c=0.2, gamma=1, PhiParams=rep(1, 6))
# skelSTAR_m(xt, t=10, p=2, d=1, c=c(-0.1, 0.2), gamma=c(1, 5), PhiParams=rep(1, 9), m=3)
IC <- function(n, p, sigmaSq, m=2) {
lik <- -n * log(2 * pi / sigmaSq) / 2 - (n - p) / 2
npar <- m * (p + 1) + 2 * (m - 1)
c(AIC= -2 * lik + 2 * npar, BIC= - 2 * lik + log(n) * npar)
}
# IC(n=length(xt), p=2, sigmaSq=0.027)
# IC(n=length(xt), p=2, sigmaSq=0.027, m=3)
# test for packages
suppressMessages(pkgTest("zeallot"))
suppressMessages(pkgTest("matlib"))
EstimSTAR_m <- function(x, p, d, c, gamma, m=2, type=c("logistic", "exponential")) {
type <- match.arg(type)
m = as.integer(m)
if (m <= 0) {
message("Error: regime count m has to be a positive integer")
return(NA)
}
if (length(c) != m - 1) {
message("Error: Incompatible dimensions of threshold vector and regime count.");
return(NA)
}
resultModel <- list()
cPrint <- round(c, digits=3); gammaPrint <- round(gamma, digits=3) # 3 dec. places seems enough
resultModel$name <- paste0(ifelse(type == "logistic", "L", "E"),
"STAR(", p, ",", d, ",",
paste(na.omit(cPrint), collapse=','),",",
paste(na.omit(gammaPrint), collapse=','), ")")
resultModel$nReg <- m; resultModel$type <- type
resultModel$p = p; resultModel$d = d;
resultModel$c = c; resultModel$gamma = gamma;
resultModel$data = x; n = length(x); resultModel$n = n;
X <- as.matrix(apply(as.matrix((p + 1):n), MARGIN=1, function(t) Xt_m(x, t, p, d, c, gamma, m) ))
y <- as.matrix(x[(p + 1):n])
K <- crossprod(t(X), t(X)); b <- crossprod(t(X), y);
detK <- abs(det(K))
if (detK < 0.000001) {
return(NA)
} else {
K <- inv(K)
sol_phi <- as.numeric(t(K %*% b)) # solving (X'X)*phi = X'y
# resultModel$PhiStErrors <- solution[,2] # standard errors
skel <- crossprod(X, sol_phi); resultModel$skel <- skel;
resultModel$residuals <- (y - skel)
resultModel$resSigmaSq <- 1 / (n - p) * sum(resultModel$residuals^2)
resultModel$PhiParams <- sol_phi
return(resultModel)
}
}
# str( EstimSTAR_m(xt, p=2, d=2, c=0, gamma=10) ) # 2 regimes
# str( EstimSTAR_m(xt, p=2, d=2, c=c(0, 0.2), gamma=c(10, 12), m=3) ) # 3 regimes
# ==== estimate standard errors of STAR parms: (Phi, gamma, c) ====
starParamCovMatrix <- function(x, p, d, res, Phi, gamma, c, z=x, m=2, type=c("logistic", "exponential")) {
# implementing this was tedious, and I can only test the symmetry of the result matrix
type <- match.arg(type)
n <- length(x); k <- p; times <- (k + 1):n;
Phi <- matrix(Phi, nrow=m, byrow=T)
# transition derivatives
# === the following arrays are (m - 1)x(n - k) matrices ====
G <- sapply(times, function(t) SmoothTransition(z[t - d], c, gamma, type))
if (type == "exponential") {
dG_dgamma <- sapply(times, function(t) exp(-gamma * (c - z[t - d])^2) * (c - z[t - d])^2)
} else {
dG_dgamma <- sapply(times, function(t) exp(gamma * (z[t - d] - c)) * (z[t - d] - c) /
(1 + exp(gamma * (z[t - d] - c)))^2)
}
if (type == "exponential") {
dG_dc <- sapply(times, function(t) 2 * gamma * (c - z[t - d]) * exp(-gamma * (c - z[t - d])^2))
} else {
dG_dc <- sapply(times, function(t) -gamma * exp(gamma * (z[t - d] + c)) /
(exp(c * gamma) + exp(gamma * z[t - d]))^2)
}
if (type == "exponential") {
d2G_dgamma2 <- sapply(times, function(t) -exp(-gamma * (c - z[t - d])^2) * (c - z[t - d])^4)
} else {
d2G_dgamma2 <- sapply(times, function(t) exp(gamma * (c + z[t - d])) * (c - z[t - d])^2 *
(exp(c * gamma) - exp(z[t - d] * gamma)) / (exp(c * gamma) + exp(z[t - d] * gamma))^3)
}
if (type == "exponential") {
d2G_dc2 <- sapply(times, function(t) -2 * gamma * exp(-gamma * (c - z[t - d])^2) *
(-1 + 2 * c^2 * gamma - 4 * c * z[t - d] * gamma + 2 * z[t - d]^2 * gamma))
} else {
d2G_dc2 <- sapply(times, function(t) gamma^2 * exp(gamma * (c + z[t - d])) *
(exp(c * gamma) - exp(z[t - d] * gamma)) /
(exp(c * gamma) + exp(z[t - d] * gamma))^3)
}
if (type == "exponential") {
d2G_dgammadc <- sapply(times, function(t) -2 * exp(-gamma * (c - z[t - d])^2) * (c - z[t - d]) *
(-1 + c^2 * gamma - 2 * c * z[t - d] * gamma + z[t - d]^2 * gamma))
} else {
d2G_dgammadc <- sapply(times, function(t) -exp(gamma * (z[t - d] - c)) *
(1 - c * gamma + z[t - d] * gamma + exp(gamma * (z[t - d] - c)) * (1 + c * gamma - z[t - d] * gamma)) /
(1 + exp(gamma * (z[t - d] - c)))^3)
}
# convert results to (m-1)x(n-k) matrices
G <- matrix(unlist(G), nrow=(m-1), ncol=(n-k));
dG_dgamma <- matrix(unlist(dG_dgamma), nrow=(m-1), ncol=(n-k));
dG_dc <- matrix(unlist(dG_dc), nrow=(m-1), ncol=(n-k));
d2G_dgamma2 <- matrix(unlist(d2G_dgamma2), nrow=(m-1), ncol=(n-k));
d2G_dc2 <- matrix(unlist(d2G_dc2), nrow=(m-1), ncol=(n-k));
d2G_dgammadc <- matrix(unlist(d2G_dgammadc), nrow=(m-1), ncol=(n-k));
# dimension of the parameter vector
dim_par = m*(p + 1) + 2*(m - 1)
# (p + 1)x(n - k)
Y <- sapply(times, function(t) Yt(x, t, p))
Ym <- do.call(rbind, replicate(m, Y,simplify=F))
Gt <- rbind(rep(1, (n - k)), G)
Gm <- rbind(Gt, rep(0, (n - k)))
Gm <- matrix(sapply(1:m, function(j) replicate(p+1, Gm[j,] - Gm[j + 1,])), nrow=m*(p+1), byrow=T)
Phim <- (Phi - rbind(rep(0, (p + 1)), Phi[1:(m-1),]))
Phi_m <- Phim[2:m,]
# skeleton gradients and Hessians
skelGrad <- rbind(Gm * Ym, Phi_m %*% Y * dG_dgamma, Phi_m %*% Y * dG_dc)
# d2Skel_dPhi2
zeros <- matrix(0, nrow=m*(p + 1), ncol=m*(p + 1))
# (m*(p + 1))x(2*(m - 1))
PhiSigns <- sapply(1:(m - 1), function(k)
sapply(1:m, function(j) {
if(k == j) return(rep(-1, p + 1)) else if(j - 1 == k) return(rep(1, p + 1)) else return(rep(0, p + 1))
}))
PhiSigns <- cbind(PhiSigns, PhiSigns)
PhiCornerMatrices <- lapply(1:(n - k), function(t) PhiSigns * cbind(
matrix(rep(dG_dgamma[,t], m*(p + 1)), ncol=(m-1), byrow=T),
matrix(rep(dG_dc[,t], m*(p + 1)), ncol=(m-1), byrow=T)
))
PhiDiagMatrices <- lapply(1:(n - k), function(t) rbind(
cbind( diag(d2G_dgamma2[,t], nrow=(m-1), ncol=(m-1)), diag(d2G_dgammadc[,t], nrow=(m-1), ncol=(m-1)) ),
cbind( diag(d2G_dgammadc[,t], nrow=(m-1), ncol=(m-1)), diag(d2G_dc2[,t], nrow=(m-1), ncol=(m-1)) )
))
skelHessians <- lapply(1:(n - k), function(t) rbind(
cbind(zeros, PhiCornerMatrices[[t]]* Ym[,t]),
cbind(t(PhiCornerMatrices[[t]]* Ym[,t]) ,
PhiDiagMatrices[[t]] *
do.call(cbind,
replicate(2, do.call(rbind, replicate(2,
diag(as.numeric(Phi_m %*% Y[,t]), nrow=m-1,ncol=m-1),
simplify=F)),simplify=F))
)
))
rsGradients <- lapply(1:(n - k), function(t)
2 * res[t,] * skelGrad[,t]
)
rsHessians <- lapply(1:(n - k), function(t)
2 * (sapply(1:dim_par, function(i) sapply(1:dim_par, function(j)
skelGrad[i, t] * skelGrad[j, t])) + res[t,] * skelHessians[[t]])
)
MeanHessian <- Reduce('+', rsHessians) / (n - k)
rsGrads <- lapply(1:(n - k), function(t) rsGradients[[t]] %*% t(rsGradients[[t]]))
MeanInfMatrix <- Reduce('+', rsGrads) / (n - k)
invMeanHessian <- inv(MeanHessian)
# parameter covariance matrix estimate
(invMeanHessian %*% MeanInfMatrix %*% invMeanHessian) / n
}
p=2; d=1;
# 2 regimes
m = 2; c=-0.1; gamma=10;
model <- EstimSTAR_m(xt, p=p, d=d, c=c, gamma=gamma, m=m)
cat(paste0("\n",model$name, " PhiParams & standard errors:\n Phi:"))
( Phi = model$PhiParams )
cat("Phi_se:")
res = model$residuals
sqrt( diag(starParamCovMatrix(xt, p=p, d=d, res, Phi, c=c, gamma=gamma, m=m))[1:(m*(p+1))] )
# 3 regimes
m = 3; c=c(-0.1,0.1); gamma=c(10,11);
model <- EstimSTAR_m(xt, p=p, d=d, c=c, gamma=gamma, m=m)
cat(paste0("\n",model$name, " PhiParams & standard errors:\n Phi:"))
( Phi = model$PhiParams )
cat("Phi_se:")
res = model$residuals
sqrt( diag(starParamCovMatrix(xt, p=p, d=d, res, Phi, c=c, gamma=gamma, m=m))[1:(m*(p+1))] )
EstimSTAR_m_postproc <- function(model) {
m <- model$nReg; x <- model$data; n <- model$n;
p <- model$p; c <- model$c; gamma <- model$gamma;
type <- model$type
Phi <- model$PhiParams; res <- model$residuals
model$PhiStErrors <- sqrt( diag(starParamCovMatrix(xt, p=p, d=d, res=res, Phi, c=c, gamma=gamma, m=m, type=type))[1:(m*(p+1))] )
# Information criteria
starIC <- as.list(IC(n=n, p=p, sigmaSq=model$resSigmaSq, m=m))
model$AIC <- starIC$AIC
model$BIC <- starIC$BIC
return(model)
}
cat("LSTAR(2, 2, 0, 10), m=2 : \n")
str( EstimSTAR_m_postproc(EstimSTAR_m(xt, p=2, d=2, c=0, gamma=10)) ) # 2 regimes
cat("LSTAR(2, 2, 0, 0.2, 10, 12), m=3 : \n")
str( EstimSTAR_m_postproc(EstimSTAR_m(xt, p=2, d=2, c=c(0, 0.2), gamma=c(10, 12), m=3)) ) # 3 regimes
m <- 2
cmin <- as.numeric(quantile(xt, 0.075)); cmax <- as.numeric(quantile(xt, 0.925));
h = (cmax - cmin) / 50 # determine the step by which c should be iterated
hypars <- starTest$LSTARs # hyperparameter array
hypars
m <- 2
cmin <- as.numeric(quantile(xt, 0.075)); cmax <- as.numeric(quantile(xt, 0.925));
h = (cmax - cmin) / 50 # determine the step by which c should be iterated
cat("hypars=\n")
( hypars <- starTest$LSTARs ) # hyperparameter array
models_s <- list() # s as in smooth
models_s_columns <- list()
suppressMessages(pkgTest("foreach"))
suppressMessages(pkgTest("doParallel"))
pkgs <- c("zeallot", "matlib")
n_cores <- (detectCores() - 1)
for(i in 1:nrow(hypars)) {
p <- hypars[i, 1]; d <- hypars[i, 2];
cl <- makeCluster(n_cores)
registerDoParallel(cl)
pdModels <- foreach(gamma = seq(from = 0.5, to = 10, by = 0.5), .packages = pkgs) %:%
foreach(c = seq(cmin, cmax, by = h), .packages = pkgs) %dopar% {
tmp <- EstimSTAR_m(xt, p, d, c, gamma) # try to run the function
# then test whether it returns`NA` as a result
if (!as.logical(sum(is.na(tmp))) ) {
list(tmp)
}
}
stopCluster(cl)
pdOmitted <- lapply(unlist(pdModels, recursive=F),
function(m) if(!is.logical(m) && !is.null(m)) m else list(list(resSigmaSq = Inf)))
sigmas <- as.numeric(lapply(pdOmitted, function(m) m[[1]]$resSigmaSq))
s_orders <- order(sigmas)
# only the model whose parameter c gives the lowest residual square sum is chosen for postprocessing
min_sigma_model <- EstimSTAR_m_postproc(pdOmitted[[ s_orders[1] ]][[1]])
models_s[[length(models_s) + 1]] <- min_sigma_model
models_s_columns[[length(models_s_columns) + 1]] <- c(
min_sigma_model$type,
p, d, round(min_sigma_model$c, digits=4),
round(min_sigma_model$gamma, digits=4),
round(min_sigma_model$AIC, digits=4),
round(min_sigma_model$BIC, digits=4),
round(min_sigma_model$resSigmaSq, digits=4))
models_s_columns <- data.frame(matrix(unlist(models_s_columns), nrow=length(models_s_columns), byrow=T))
names(models_s_columns) <- c(
"transition", "p", "d", "c", "gamma",
"AIC", "BIC", "resSigmaSq"
)
BICs_s <- sapply(models_s, function(m) m$BIC)
orders_s <- order(BICs_s)
models_s_Out <- models_s_columns[orders_s,]
head(models_s_Out, n=12)
m <- 2
cmin <- as.numeric(quantile(xt, 0.075)); cmax <- as.numeric(quantile(xt, 0.925));
h = (cmax - cmin) / 50 # determine the step by which c should be iterated
cat("hypars=\n")
( hypars <- starTest$LSTARs ) # hyperparameter array
models_s <- list() # s as in smooth
models_s_columns <- list()
suppressMessages(pkgTest("foreach"))
suppressMessages(pkgTest("doParallel"))
pkgs <- c("zeallot", "matlib")
n_cores <- (detectCores() - 1)
for(i in 1:nrow(hypars)) {
p <- hypars[i, 1]; d <- hypars[i, 2];
cl <- makeCluster(n_cores)
registerDoParallel(cl)
pdModels <- foreach(gamma = seq(from = 0.5, to = 10, by = 0.5), .packages = pkgs) %:%
foreach(c = seq(cmin, cmax, by = h), .packages = pkgs) %dopar% {
tmp <- EstimSTAR_m(xt, p, d, c, gamma) # try to run the function
# then test whether it returns`NA` as a result
if (!as.logical(sum(is.na(tmp))) ) {
list(tmp)
}
}
stopCluster(cl)
pdOmitted <- lapply(unlist(pdModels, recursive=F),
function(m) if(!is.logical(m) && !is.null(m)) m else list(list(resSigmaSq = Inf)))
sigmas <- as.numeric(lapply(pdOmitted, function(m) m[[1]]$resSigmaSq))
s_orders <- order(sigmas)
# only the model whose parameter c gives the lowest residual square sum is chosen for postprocessing
min_sigma_model <- EstimSTAR_m_postproc(pdOmitted[[ s_orders[1] ]][[1]])
models_s[[length(models_s) + 1]] <- min_sigma_model
models_s_columns[[length(models_s_columns) + 1]] <- c(
min_sigma_model$type,
p, d, round(min_sigma_model$c, digits=4),
round(min_sigma_model$gamma, digits=4),
round(min_sigma_model$AIC, digits=4),
round(min_sigma_model$BIC, digits=4),
round(min_sigma_model$resSigmaSq, digits=4))
}
models_s_columns
